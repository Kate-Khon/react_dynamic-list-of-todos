{"version":3,"sources":["components/Loader/Loader.tsx","api.ts","types/TodoStatus.ts","components/TodoModal/TodoModal.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","App.tsx","index.tsx"],"names":["Loader","className","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoStatus","getUser","userId","TodoModal","selectedTodo","setSelectedTodo","useState","user","setUser","useEffect","loading","a","id","type","onClick","title","completed","href","email","name","TodoList","todos","selectedUserId","setSelectedUserId","map","todo","classNames","handleSelectingTodo","TodoFilter","setSortType","setQuery","query","onChange","event","target","value","placeholder","style","pointerEvents","App","setTodos","visibleTodos","setVisibleTodos","isLoaded","setIsLoaded","ALL","sortType","prevSortType","setPrevSortType","loadedTodos","toUpdate","ACTIVE","filter","COMPLETED","includes","toLowerCase","sortTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b17704f.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL\n= 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum TodoStatus {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo,\n  setSelectedTodo: (state: Todo | null) => void,\n  userId: number,\n};\n\nexport const TodoModal: React.FC<Props> = (\n  { selectedTodo, setSelectedTodo, userId },\n) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const loading = async () => {\n      setUser(await getUser(userId));\n    };\n\n    loading();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto: ${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoModal } from '../TodoModal';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n\n  const handleSelectingTodo = (todo: Todo, userId: number) => {\n    setSelectedTodo(todo);\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames(\n              { 'has-background-info-light': todo === selectedTodo },\n            )}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            {todo.completed ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            ) : (\n              <td className=\"is-vcentered\" />\n            )}\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-danger': !todo.completed },\n                { 'has-text-success': todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleSelectingTodo(todo, todo.userId)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'far fa-eye',\n                    { 'fa-eye-slash': todo === selectedTodo },\n                  )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n\n        {selectedTodo && (\n          <TodoModal\n            selectedTodo={selectedTodo}\n            setSelectedTodo={setSelectedTodo}\n            userId={selectedUserId}\n          />\n        )}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { TodoStatus } from '../../types/TodoStatus';\n\ntype Props = {\n  setSortType: (status: TodoStatus) => void,\n  setQuery: (query: string) => void,\n  query: string,\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  { setSortType, setQuery, query },\n) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => setSortType(event.target.value as TodoStatus)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            setQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './types/TodoStatus';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const [sortType, setSortType] = useState<TodoStatus>(TodoStatus.ALL);\n  const [prevSortType, setPrevSortType] = useState<TodoStatus>(TodoStatus.ALL);\n\n  const loading = async () => {\n    const loadedTodos = await getTodos();\n\n    setTodos(loadedTodos);\n    setVisibleTodos(loadedTodos);\n\n    setIsLoaded(true);\n  };\n\n  useEffect(() => {\n    loading();\n    setVisibleTodos(todos);\n  }, []);\n\n  const sortTodos = () => {\n    let toUpdate = visibleTodos;\n\n    if (sortType !== prevSortType) {\n      switch (sortType) {\n        case (TodoStatus.ACTIVE):\n          toUpdate = todos.filter(todo => !todo.completed);\n          break;\n        case (TodoStatus.COMPLETED):\n          toUpdate = todos.filter(todo => todo.completed);\n          break;\n        default:\n          toUpdate = todos;\n      }\n\n      setPrevSortType(sortType);\n    }\n\n    if (query) {\n      toUpdate = toUpdate\n        .filter(todo => todo.title.includes(query.toLowerCase()));\n    }\n\n    setVisibleTodos(toUpdate);\n  };\n\n  useEffect(() => {\n    sortTodos();\n  }, [sortType, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setSortType={setSortType}\n                setQuery={setQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoaded && (\n                <Loader />\n              )}\n              <TodoList todos={visibleTodos} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}